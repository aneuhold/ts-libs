name: 'Package Build and Publish'
description: 'Build and publish a package to JSR and NPM'

inputs:
  package-name:
    description: 'Name of the package to build and publish'
    required: true
  npm-token:
    description: 'NPM token for authentication'
    required: true
  github-token:
    description: 'GitHub token for creating git tags'
    required: true
  skip-jsr:
    description: 'Skip JSR publishing'
    required: false
    default: 'false'
  skip-npm:
    description: 'Skip NPM publishing'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Build dependencies and ${{ inputs.package-name }}
      shell: bash
      run: pnpm --filter ${{ inputs.package-name }}... build

    - name: Publish ${{ inputs.package-name }} to JSR
      if: inputs.skip-jsr != 'true'
      shell: bash
      run: pnpm --filter ${{ inputs.package-name }} jsr:publish

    - name: Add Auth Token for npm
      if: inputs.skip-npm != 'true'
      shell: bash
      run: echo "//registry.npmjs.org/:_authToken=${{ inputs.npm-token }}" > ~/.npmrc

    - name: Publish ${{ inputs.package-name }} to NPM
      if: inputs.skip-npm != 'true'
      shell: bash
      working-directory: packages/${{ inputs.package-name }}
      run: pnpm npm:publish

    - name: Create and push git tag for ${{ inputs.package-name }}
      shell: bash
      working-directory: packages/${{ inputs.package-name }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Configure git to use the GitHub token for authentication
        git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

        # Get the package version from package.json
        PACKAGE_VERSION=$(node -p "require('./package.json').version")

        # Get the actual package name from package.json and remove scope if present
        PACKAGE_NAME=$(node -p "require('./package.json').name.replace(/^@[\\w-]+\//, '')")

        # Create the git tag in the format: {package-name}-v{version}
        GIT_TAG="${PACKAGE_NAME}-v${PACKAGE_VERSION}"

        echo "Creating git tag: $GIT_TAG"

        # Create the tag locally
        git tag "$GIT_TAG"

        # Push the tag to origin
        git push origin "$GIT_TAG"

        echo "Successfully created and pushed git tag: $GIT_TAG"
